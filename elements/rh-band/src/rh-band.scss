@import "../../rh-sass/rh-sass";

$LOCAL: band;
$SLOT: "";
$aside-md: 250px;
$aside-lg: 300px;



:host {
  // Default spacing values
  --rh-band--padding-vertical:                 calc( #{rh-var(container-spacer)} * 4);
  --rh-band--padding-horizontal:               calc( #{rh-var(container-spacer)} * 1);
  // Bring them together for ease of use below
  --rh-band--padding-full:                         #{rh-local(padding-vertical)}  #{rh-local(padding-horizontal)};

  // Surface colors
  --rh-band--backgroundColor:                 #{rh-color(surface--base)};
  --rh-band--backgroundPositionX:             center;
  --rh-band--backgroundPositionY:             center;
  // Border settings
  --rh-band--borderColor:                     transparent;
  --rh-band--borderTopWidth:                  #{rh-var(surface--border-width)};
  --rh-band--borderBottomWidth:               #{rh-var(surface--border-width)};
  --rh-band--borderStyle:                     #{rh-var(surface--border-style)};
  // Accent title styles
  --rh-band_header-title--color:             #{rh-color(ui-accent)};
  // Layouts, grid layouts
  --rh-band_header--layout:                   1fr;
  --rh-band_body--layout:                     1fr;
  --rh-band_footer--layout:                   1fr;
  // Text colors
  --rh-broadcasted--color--text:              #{rh-color(surface--base--text)};
  --rh-broadcasted--color--ui-link:           #{rh-color(surface--base--link)};
  --rh-broadcasted--color--ui-link--visited:  #{rh-color(surface--base--link--visited)};
  --rh-broadcasted--color--ui-link--hover:    #{rh-color(surface--base--link--hover)};
  --rh-broadcasted--color--ui-link--focus:    #{rh-color(surface--base--link--focus)};
  // Band width logic
  // Initialize at mobile breakpoint
  --rh-band--width:                           auto;

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @media screen and (min-width: rh-breakpoint(#{$size})) {

      --rh-band--width: calc( #{rh-breakpoint(#{$size})} - calc(#{rh-local(padding-horizontal)} * 4) );

    }
  }
  // Reduce padding for print
  @media print {
    --rh-band--padding-full:    calc(#{rh-local(padding-vertical)} / 2)  #{rh-local(padding-horizontal)};
  }

  // Tag element styles
  display: block;
}

@each $color in (dark, darkest, accent, complement, light, lightest) {
  :host([color="#{$color}"]) {
    --rh-band--backgroundColor:                  #{rh-color(surface--#{$color})};
    --rh-broadcasted--color--text:               #{rh-color(surface--#{$color}--text)};
    --rh-broadcasted--color--ui-link:            #{rh-color(surface--#{$color}--link)};
    --rh-broadcasted--color--ui-link--visited:   #{rh-color(surface--#{$color}--link--visited)};
    --rh-broadcasted--color--ui-link--hover:     #{rh-color(surface--#{$color}--link--hover)};
    --rh-broadcasted--color--ui-link--focus:     #{rh-color(surface--#{$color}--link--focus)};
  }
}

// thinner padding on top & bottom
:host([size="small"]) {
  --rh-band--padding-full:   calc(#{rh-local(padding-vertical)} / 4)  #{rh-local(padding-horizontal)};
}

//  rh-local returns: var(--rh-band-(SLOT)--arguement);

.rh-band {
  &__wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-items: flex-start;

    // Padding 
    padding: calc(#{rh-local(padding-vertical)} / 2)  #{rh-local(padding-horizontal)};

    @media (min-width: #{rh-breakpoint(sm)}) {
      padding: #{rh-local(padding-full)};
    }


    // Border styles
    border-top-width:    #{rh-local(borderTopWidth)};
    border-bottom-width: #{rh-local(borderBottomWidth)};
    border-style:        #{rh-local(borderStyle)};
    border-color:        #{rh-local(borderColor)};

    // Base colors
    background-color:      #{rh-local(backgroundColor)};
    background-position-x: #{rh-local(backgroundPositionX)};
    background-position-y: #{rh-local(backgroundPositionY)};
    color:                 #{rh-radio(color, text)};

    // Remove background color for print
    @include rh-no-print-background;


  }
  &__container {
    margin:         0 auto;
    max-width: #{rh-local(width)};

  }
  &__container,
  &__content {
    // Fill the majority of the band
    flex-grow: 1;

    // Aside layouts
    display:        flex;
    flex-direction: column;
    @media (min-width: #{rh-breakpoint(md)}) {
      flex-direction: row;
    }
    > * {
      @media (min-width: #{rh-breakpoint(sm)}) {
        width: 100%;
        margin-bottom: #{$rh-global--spacer * 2};
      }
      @media (max-width: #{rh-breakpoint(md)}) {
        margin-bottom: 0;
      }
      &:last-child {
        margin-bottom: 0;
      }
    }
  }
  &__main > *:not(:last-child) {
    margin-bottom: #{rh-var(container-spacer)};
  }

  &__header,
  &__body,
  &__footer,
  &__aside {
    display: block;
    &::slotted(*) {
      margin-top: 0;
    }
  }
  &__header {
    $SLOT: header;
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: #{rh-var(container-spacer)};
    @media screen and (min-width: #{rh-breakpoint(md)}) {
      grid-template-columns: #{rh-local(layout)};
    }
  }
  &__body {
    $SLOT: body;
    flex-grow: 1;
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: #{rh-var(container-spacer)};
    @media screen and (min-width: #{rh-breakpoint(md)}) {
      grid-template-columns: #{rh-local(layout)};
      width: calc(100% - (#{$aside-md} + calc(#{rh-var(container-spacer)} * 2)));
      [aside~="full"] & {
        margin-right: 0;
        margin-left: 0;
      }
    }
  }
  &__footer {
    $SLOT: footer;
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: #{rh-var(container-spacer)};
    @media screen and (min-width: #{rh-breakpoint(md)}) {
      grid-template-columns: #{rh-local(layout)};
    }
  }
  &__aside {
    $SLOT: aside;
    display: grid;
    grid-template-columns: 1fr;
    grid-gap:  #{rh-var(container-spacer)};

    [aside~="left"] & {
      margin: #{rh-var(container-spacer)} 0;
    }
    [aside~="right"] & {
      margin: #{rh-var(container-spacer)} 0;
    }

    @media screen and (min-width: #{rh-breakpoint(md)}) {
      grid-template-columns: #{rh-local(layout)};
      max-width: #{$aside-md};
      [aside~="left"] & {
        order: -1;
        margin: 0;
        margin-right: calc(#{rh-var(container-spacer)} * 2);
      }
      [aside~="right"] & {
        order: 2;
        margin: 0;
        margin-left: calc(#{rh-var(container-spacer)} * 2);
      }
    }
    @media (min-width: #{rh-breakpoint(lg)}) {
      width: #{$aside-lg};
    }

  }
}
