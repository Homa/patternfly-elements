@import "../../pfe-sass/pfe-sass";

$LOCAL: band;
$aside-sm: 240px;
$aside-lg: 300px;

:host {
  display: block;

  // Default spacing values
  --pfe-band--padding__vertical:                 calc( #{pfe-var(container-spacer)} * 4);
  --pfe-band--padding__horizontal:               calc( #{pfe-var(container-spacer)} * 1);
  // Bring them together for ease of use below
  --pfe-band--padding:                         #{pfe-local(padding__vertical)}  #{pfe-local(padding__horizontal)};

  // Surface colors
  --pfe-band--backgroundColor:                 #{pfe-color(surface--base)};
  --pfe-band--backgroundPositionX:             center;
  --pfe-band--backgroundPositionY:             center;

  // Border settings
  --pfe-band--border:                          #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;

  // Accent title styles
  --pfe-band_header-title--color:             #{pfe-color(ui-accent)};

  // Layouts, grid layouts
  --pfe-band--layout:                          1fr;
  --pfe-band_header--layout:                   1fr;
  --pfe-band_body--layout:                     1fr;
  --pfe-band_footer--layout:                   1fr;
  --pfe-band_aside--layout:                    #{$aside-lg};
  --pfe-band--gutter:                          #{ calc(#{pfe-var(container-spacer)} * 2) };

  // Text colors
  --pfe-broadcasted--color--text:              #{pfe-color(surface--base--text)};
  --pfe-broadcasted--color--ui-link:           #{pfe-color(surface--base--link)};
  --pfe-broadcasted--color--ui-link--visited:  #{pfe-color(surface--base--link--visited)};
  --pfe-broadcasted--color--ui-link--hover:    #{pfe-color(surface--base--link--hover)};
  --pfe-broadcasted--color--ui-link--focus:    #{pfe-color(surface--base--link--focus)};

  // Band width logic
  // Initialize at mobile breakpoint
  --pfe-band--width: auto;

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      --pfe-band--width: calc( #{pfe-breakpoint(#{$size})} - calc(#{pfe-local(padding__horizontal)} * 4) );
    }
  }
  // Reduce padding for print
  @media print {
    --pfe-band--padding: calc(#{pfe-local(padding__vertical)} / 2) #{pfe-local(padding__horizontal)};
  }

  // Wrapper sets padding and background visuals
  position: relative;
  display: flex;
  flex-direction: column;
  justify-items: flex-start;

  // Padding 
  padding: calc(#{pfe-local(padding__vertical)} / 2)  #{pfe-local(padding__horizontal)};

  @media (min-width: #{pfe-breakpoint(sm)}) {
    padding: #{pfe-local(padding)};
  }

  // Border styles
  border: #{pfe-local(border)};

  // Base colors
  background-color:      #{pfe-local(backgroundColor)};
  background-position-x: #{pfe-local(backgroundPositionX)};
  background-position-y: #{pfe-local(backgroundPositionY)};
  color:                 #{pfe-radio(color, text)};

  // Remove background color for print
  @include pfe-no-print-background;

  // Tag element styles
  *, *::before, *::after {
    box-sizing: border-box;
  }
}

@each $color in (darker, darkest, accent, complement, lighter, lightest) {
  :host([pfe-color="#{$color}"]) {
    --pfe-band--backgroundColor:                  #{pfe-color(surface--#{$color})};
    --pfe-broadcasted--color--text:               #{pfe-color(surface--#{$color}--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--#{$color}--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--#{$color}--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--#{$color}--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--#{$color}--link--focus)};
  }
}

// thinner padding on top & bottom
:host([pfe-size="small"]) {
  --pfe-band--padding:   calc(#{pfe-local(padding__vertical)} / 4)  #{pfe-local(padding__horizontal)};
}

.pfe-band {
  &__container {
    margin:    0 auto;
    max-width: #{pfe-local(width)};

    // Grid styles
    display:   grid;
    grid-gap:  #{pfe-var(container-spacer)} calc(#{pfe-var(container-spacer)} * 4);
    grid-template-columns: #{pfe-local(layout)};
    grid-template-rows: max-content;
    grid-template-areas:
     "header"
     "body"
     "footer"
     "aside";
     // Move the aside for mobile if top selected
     [pfe-aside-mobile="top"] & {
       grid-template-areas:
          "aside"
          "header"
          "body"
          "footer";
     }

     @media (min-width: #{pfe-breakpoint(sm)}) {
       --pfe-band--layout: 3fr minmax($aside-sm, 1fr);
       grid-template-areas:
        "header header"
        "body aside"
        "footer footer";
     }

     // spacing between children on mobile (around aside region)
     > *:not(:last-child) {
       @media (max-width: #{pfe-breakpoint(md) - 1}) {
           margin-bottom: #{pfe-var(container-spacer)};
       }
     }
  }
  @each $slot in (header, body, footer, aside) {
    &__#{$slot} {
      grid-area: $slot;
      // Set up the internal grid system for each slot
      display: grid;
      grid-gap: #{pfe-var(container-spacer)};
      grid-template-columns: #{pfe-local(layout, $slot)};
      grid-template-rows: max-content;
      > *::slotted(*) {
        margin: 0;
      }
    }
  }
}
