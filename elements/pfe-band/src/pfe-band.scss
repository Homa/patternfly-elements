@import "../../pfe-sass/pfe-sass";

$LOCAL: band;
$aside-sm: 240px;
$aside-lg: 300px;

:host {
  display: block;

  // Default spacing values
  --pfe-band--padding__vertical:               calc( #{pfe-var(container-spacer)} * 4);
  --pfe-band--padding__horizontal:             calc( #{pfe-var(container-spacer)} * 1);
  // Bring them together for ease of use below
  --pfe-band--padding:                         #{pfe-local(padding__vertical)}  #{pfe-local(padding__horizontal)};

  // Surface colors
  --pfe-band--backgroundColor:                 #{pfe-color(surface--base)};
  --pfe-band--backgroundPosition:              center center;

  // Border settings
  --pfe-band--border:                          #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;

  // Layouts, grid layouts
  --pfe-band--layout:                          1fr;
  --pfe-band_header--layout:                   1fr;
  --pfe-band_body--layout:                     1fr;
  --pfe-band_footer--layout:                   1fr;
  --pfe-band_aside--layout:                    1fr;

  // Vertical spacing
  --pfe-band--gutter:                          #{pfe-var(container-spacer)};

  // Text colors
  --pfe-broadcasted--color--text:              #{pfe-color(surface--base--text)};
  --pfe-broadcasted--color--ui-link:           #{pfe-color(surface--base--link)};
  --pfe-broadcasted--color--ui-link--visited:  #{pfe-color(surface--base--link--visited)};
  --pfe-broadcasted--color--ui-link--hover:    #{pfe-color(surface--base--link--hover)};
  --pfe-broadcasted--color--ui-link--focus:    #{pfe-color(surface--base--link--focus)};

  // Band width logic
  // Initialize at mobile breakpoint
  --pfe-band--width: auto;

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      --pfe-band--width: calc( #{pfe-breakpoint(#{$size})} - calc(#{pfe-local(padding__horizontal)} * 4) );
    }
  }
  // Reduce padding for print
  @media print {
    --pfe-band--padding: calc(#{pfe-local(padding__vertical)} / 2) #{pfe-local(padding__horizontal)};
  }

  // Wrapper sets padding and background visuals
  position: relative;
  display: flex;
  flex-direction: column;
  justify-items: flex-start;

  // Padding 
  padding: calc(#{pfe-local(padding__vertical)} / 2)  #{pfe-local(padding__horizontal)};

  @media (min-width: #{pfe-breakpoint(sm)}) {
    padding: #{pfe-local(padding)};
  }

  // Border styles
  border: #{pfe-local(border)};

  // Base colors
  background-color:      #{pfe-local(backgroundColor)};
  background-position:   #{pfe-local(backgroundPosition)};
  color:                 #{pfe-radio(color, text)};

  // Remove background color for print
  @include pfe-no-print-background;

  // Tag element styles
  *, *::before, *::after {
    box-sizing: border-box;
  }
}

@each $color in (darker, darkest, accent, complement, lighter, lightest) {
  :host([pfe-color="#{$color}"]) {
    --pfe-band--backgroundColor:                  #{pfe-color(surface--#{$color})};
    --pfe-broadcasted--color--text:               #{pfe-color(surface--#{$color}--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--#{$color}--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--#{$color}--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--#{$color}--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--#{$color}--link--focus)};
  }
}

// thinner padding on top & bottom
:host([pfe-size="small"]) {
  --pfe-band--padding:   calc(#{pfe-local(padding__vertical)} / 4)  #{pfe-local(padding__horizontal)};
}

.pfe-band {
  &__container {
    --pfe-band_region--width: calc(1fr - #{$aside-sm} - #{pfe-local(gutter)});
    --pfe-band--gridTemplateArea_row2: "body";
    @media (min-width: #{pfe-breakpoint(md)}) {
      --pfe-band--gridTemplateArea_row2: "body body";
    }

    position:  relative;
    margin:    0 auto;
    max-width: #{pfe-local(width)};

    // Fallback styles
    display:         flex;
    flex-flow:       row wrap;
    align-items:     flex-start;
    justify-content: space-between;
    // Grid support styles
    @supports (display: grid) {
      display:   grid;
      grid-gap: #{pfe-local(gutter)};
      grid-column-gap: calc(#{pfe-local(gutter)} * 3);
      grid-template-columns: #{pfe-local(layout)};
      grid-template-rows: max-content;
      grid-template-areas: var(--pfe-band--gridTemplateArea_row1) var(--pfe-band--gridTemplateArea_row2);
    }
    &[pfe-aside-desktop="left"],
    &[pfe-aside-mobile="top"] {
      @media (min-width: #{pfe-breakpoint(md)}) {
        flex-direction: row-reverse;
      }
    }
    &[pfe-has-header] {
      --pfe-band--gridTemplateArea_row1: "header";
      // Adjust styles at md breakpoint and higher
      @media (min-width: #{pfe-breakpoint(md)}) {
        --pfe-band--gridTemplateArea_row1: "header header";
      }
      &[pfe-aside-mobile="top"] {
        --pfe-band--gridTemplateArea_row1: "aside" "header";
        @media (min-width: #{pfe-breakpoint(md)}) {
          --pfe-band--gridTemplateArea_row1: "header header";
        }
      }
    }
    &[pfe-has-aside] {
      --pfe-band--gridTemplateArea_row2: "main" "aside";
      // Adjust styles at md breakpoint and higher
      @media (min-width: #{pfe-breakpoint(md)}) {
        --pfe-band--layout: 1fr #{$aside-sm};
        --pfe-band--gridTemplateArea_row2: "main aside";
      }
      @media (min-width: #{pfe-breakpoint(lg)}) {
        --pfe-band--layout: 1fr #{$aside-lg};
      }
    }
    // Move the aside for mobile if top selected
    &[pfe-aside-mobile="top"] {
      --pfe-band--gridTemplateArea_row1: "aside";
      --pfe-band--gridTemplateArea_row2: "main";
    }
    &[pfe-aside-height="full"] {
      // --pfe-band--gridTemplateArea_row2: "main" "aside";
      @media (min-width: #{pfe-breakpoint(md)}) {
        --pfe-band--gridTemplateArea_row1: "aside";
        --pfe-band--gridTemplateArea_row2: "main";
      }
      &[pfe-aside-mobile="bottom"],
      &[pfe-aside-mobile="top"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          --pfe-band--gridTemplateArea_row1: "main aside";
          --pfe-band--gridTemplateArea_row2: "main aside";
        }
      }
      &[pfe-aside-desktop="left"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          --pfe-band--gridTemplateArea_row1: "aside main";
          --pfe-band--gridTemplateArea_row2: "aside main";
        }
      }
    }
    // Move the aside for desktop if left selected
    &[pfe-aside-desktop="left"] {
      @media (min-width: #{pfe-breakpoint(md)}) {
        --pfe-band--layout: #{$aside-sm} 1fr;
        --pfe-band--gridTemplateArea_row2: "aside main";
      }
      @media (min-width: #{pfe-breakpoint(lg)}) {
        --pfe-band--layout: #{$aside-lg} 1fr;
      }
    }
  }
  &__main {
    display:     flex;
    flex-flow:   column nowrap;
    // Grid support styles
    @supports (display: grid) {
      display:   grid;
      grid-gap: #{pfe-local(gutter)};
      grid-column-gap: calc(#{pfe-local(gutter)} * 3);
      grid-template-areas: var(--pfe-band_main--gridTemplateArea_header) "body" var(--pfe-band_main--gridTemplateArea_footer);
    }
    @each $slot in (header, footer) {
      [pfe-has-#{$slot}] & {
        @supports (display: grid) {
          --pfe-band_main--gridTemplateArea_#{$slot}: "#{$slot}";
        }
      }
    }
    > *:not(:last-child) {
      margin-bottom: #{pfe-local(gutter)};
    }
    @media (min-width: #{pfe-breakpoint(md)}) {
      width: #{pfe-local(width, region)};
    }
  }
  // Set up the flex styles for each region
  @each $slot in (header, body, footer, aside) {
    &__#{$slot} {
      display:     flex;
      flex-flow:   column nowrap;
      // Grid support styles
      @supports (display: grid) {
        // Set up the internal grid system for each slot
        display: grid;
        grid-gap: #{pfe-local(gutter)};
        grid-template-columns: #{pfe-local(layout, $slot)};
        grid-template-rows: max-content;
      }
      &:not(:last-child) {
        margin-bottom: #{pfe-local(gutter)};
        @supports (display: grid) {
          margin-bottom: 0;
        }
      }
      &::slotted(*) {
        margin: 0;
      }
      &::slotted(*:not(:last-child)) {
        margin-bottom: #{pfe-local(gutter)};
        @supports (display: grid) {
          margin-bottom: 0;
        }
      }
    }
  }
  @each $slot in (header, main, aside) {
    &__#{$slot} {
      // Grid support styles
      @supports (display: grid) {
        @media (min-width: 0) {
          grid-area: #{$slot};
          width: auto;
        }
      }
    }
  }
  &__header {
    @media (min-width: #{pfe-breakpoint(md)}) {
      order: -1;
    }
  }
  &__body > *::slotted(*:not(:last-child)) {
    @media (min-width: #{pfe-breakpoint(md)}) {
      margin-bottom: #{pfe-local(gutter)};
    }
  }
  &__aside {
    @media (min-width: #{pfe-breakpoint(md)}) {
      order: 1;
      width: #{$aside-sm};
      [pfe-aside-desktop="right"] & {
        order: 0;
      }
    }
    @media (min-width: #{pfe-breakpoint(lg)}) {
      width: #{$aside-lg};
    }
  }
}
