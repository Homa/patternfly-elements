import{autoReveal as t}from"./reveal.js";class e extends HTMLElement{static create(t){window.customElements.define(t.tag,t)}static debugLog(t=null){return null!==t&&(e._debugLog=!!t),e._debugLog}static log(...t){e.debugLog()&&console.log(...t)}static get PfeTypes(){return{Container:"container",Content:"content",Pattern:"pattern"}}get pfeType(){return this.getAttribute("pfe-type")}set pfeType(t){this.setAttribute("pfe-type",t)}constructor(t,{type:e=null,delayRender:s=!1}={}){super(),this._pfeClass=t,this.tag=t.tag,this._queue=[],this.template=document.createElement("template"),this.attachShadow({mode:"open"}),e&&this._queueAction({type:"setProperty",data:{name:"pfeType",value:e}}),s||this.render()}connectedCallback(){window.ShadyCSS&&window.ShadyCSS.styleElement(this),this.classList.add("PFElement"),this._queue.length&&this._processQueue()}attributeChangedCallback(t,e,s){if(!this._pfeClass.cascadingAttributes)return;const i=this._pfeClass.cascadingAttributes[t];i&&this._copyAttribute(t,i)}_copyAttribute(t,e){const s=[...this.querySelectorAll(e),...this.shadowRoot.querySelectorAll(e)],i=this.getAttribute(t),a=null==i?"removeAttribute":"setAttribute";for(const e of s)e[a](t,i)}_queueAction(t){this._queue.push(t)}_processQueue(){this._queue.forEach(t=>{this[`_${t.type}`](t.data)}),this._queue=[]}_setProperty({name:t,value:e}){this[t]=e}render(){this.shadowRoot.innerHTML="",this.template.innerHTML=this.html,window.ShadyCSS&&window.ShadyCSS.prepareTemplate(this.template,this.tag),this.shadowRoot.appendChild(this.template.content.cloneNode(!0))}log(...t){e.log(`[${this.tag}]`,...t)}}t(e.log);export default e;
//# sourceMappingURL=pfelement.js.map
