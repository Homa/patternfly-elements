@import "../../rh-sass/rh-sass";

// Shim for theme changes
$rh-global--cta--BorderRadius: 5em !default; //$rh-global--border--BorderRadius !default;

// Specific SASS vars that won't be themeable (at least for now)
$rh-cta__arrow-size: 0.313em; // Was ~5px at 16px
$rh-cta__context-color: pink;

@mixin make-default-cta-state($this-name: "hover", $this-color: var(--rh-cta--link-color--hover)) {
  & ::slotted(a:#{$this-name}) {
    color: $this-color;

    &::after {
      @include rh-arrow-color($this-color);
    }
  }
}

:host {
  display: inline-block;

  @include rh-define-vars("cta__arrow--spacing", "spacing--xxs", $rh-global--spacer--xxs);
  @include rh-define-vars("cta--link-color", "link-color", $rh-global--link-color);
  @include rh-define-vars("cta--link-color--visited", "link-color--visited", green);
  @include rh-define-vars("cta--link-color--hover", "link-color--hover", $rh-global--link-color--hover);
  @include rh-define-vars("cta--link-color--focus", "link-color--focus", $rh-global--link-color--focus);

  // CTA Default
  & ::slotted(a) {
    color: rh-var("cta--link-color");

    &::after {
      margin-left: rh-var("cta__arrow--spacing");
      vertical-align: middle;
      @include rh-arrow(right, rh-var("cta--link-color"), $rh-cta__arrow-size, $rh-cta__arrow-size, true);
    }
  }

  // CTA Default Visited
  @include make-default-cta-state("visited", rh-var("cta--link-color--visited"));
  // CTA Default Hover
  @include make-default-cta-state("hover", rh-var("cta--link-color--hover"));
  // CTA Default Focus
  @include make-default-cta-state("focus", rh-var("cta--link-color--focus"));
}

:host([inverted]) {
  --rh-cta--link-color--inverted: var(--rh-theme--cta--link-color--inverted, var(--rh-theme--link-color--inverted, #{$rh-global--link-color--inverted}));
  --rh-cta--link-color--inverted--visited: var(--rh-theme--cta--link-color--inverted--visited, var(--rh-theme--link-color--inverted--visited, #{$rh-global--link-color--inverted--visited}));
  --rh-cta--link-color--inverted--hover: var(--rh-theme--cta--link-color--inverted--hover, var(--rh-theme--link-color--inverted--hover, #{$rh-global--link-color--inverted--hover}));
  --rh-cta--link-color--inverted--focus: var(--rh-theme--cta--link-color--inverted--focus, var(--rh-theme--link-color--inverted--focus, #{$rh-global--link-color--inverted--focus}));

  // CTA Default Inverted
  & ::slotted(a) {
    color: var(--rh-cta--link-color--inverted);

    &::after {
      @include rh-arrow(right, var(--rh-cta--link-color--inverted), $rh-cta__arrow-size, $rh-cta__arrow-size, true);
    }
  }

  // CTA Default Visited
  @include make-default-cta-state("visited", var(--rh-cta--link-color--inverted--visited));
  // CTA Default Hover
  @include make-default-cta-state("hover", var(--rh-cta--link-color--inverted--hover));
  // CTA Default Focus
  @include make-default-cta-state("focus", var(--rh-cta--link-color--inverted--focus));
}

// CTA Default Color Mixin
@mixin make-default-cta-variation(
    $this-selector: ".primary",
    $this-name: "--primary",
    $this-color: $rh-global--link-color,
    $this-color-hover: $rh-global--link-color--hover,
    $this-color-focus: $rh-global--link-color--focus,
    $this-color-visited: $rh-global--link-color--visited,
    $this-modifier: ""
  ) {

  :host(#{$this-selector}) {

    --rh-cta#{$this-name}-link-color#{$this-modifier}: var(--rh-theme--cta#{$this-name}-link-color#{$this-modifier}, var(--rh-theme#{$this-name}-link-color#{$this-modifier}, #{$this-color}));
    --rh-cta#{$this-name}-link-color#{$this-modifier}--visited: var(--rh-theme--cta#{$this-name}-link-color#{$this-modifier}--visited, var(--rh-theme#{$this-name}-link-color#{$this-modifier}--visited, #{$this-color-visited}));
    --rh-cta#{$this-name}-link-color#{$this-modifier}--hover: var(--rh-theme--cta#{$this-name}-link-color#{$this-modifier}--hover, var(--rh-theme#{$this-name}-link-color#{$this-modifier}--hover, #{$this-color-hover}));
    --rh-cta#{$this-name}-link-color#{$this-modifier}--focus: var(--rh-theme--cta#{$this-name}-link-color#{$this-modifier}--focus, var(--rh-theme#{$this-name}-link-color#{$this-modifier}--focus, #{$this-color-focus}));

    & ::slotted(a) {
      color: var(--rh-cta#{$this-name}-link-color#{$this-modifier});

      &::after {
        @include rh-arrow-color(var(--rh-cta#{$this-name}-link-color#{$this-modifier}));
      }
    }

    & ::slotted(a[color]) {
      color: $this-color-visited;
    }

    // CTA Default Visited
    @include make-default-cta-state("visited", var(--rh-cta#{$this-name}-link-color#{$this-modifier}--visited));
    // CTA Default Hover
    @include make-default-cta-state("hover", var(--rh-cta#{$this-name}-link-color#{$this-modifier}--hover));
    // CTA Default Focus
    @include make-default-cta-state("focus", var(--rh-cta#{$this-name}-link-color#{$this-modifier}--focus));
  }
}

// CTA Default Primary = Default
// CTA Default Secondary
@include make-default-cta-variation(".secondary", "--secondary", $rh-global--color--gray-iron, darken($rh-global--color--gray-iron, 10%), darken($rh-global--color--gray-iron, 10%), $rh-global--color--gray-iron);
// CTA Default Accent
@include make-default-cta-variation(".accent", "--accent", $rh-global--color--red, darken($rh-global--color--red, 10%), darken($rh-global--color--red, 10%), $rh-global--color--red);

// CTA Default Inverted Primary = Default
@include make-default-cta-variation("[inverted]", "", $rh-global--link-color--inverted, $rh-global--link-color--inverted--hover, $rh-global--link-color--inverted--focus, $rh-global--link-color--inverted--visited, "--inverted");
// CTA Default Inverted Secondary
@include make-default-cta-variation("[inverted].secondary", "--secondary", $rh-global--color--white, darken($rh-global--color--white, 10%), darken($rh-global--color--white, 10%), $rh-global--color--white, "--inverted");
// CTA Default Inverted Accent
@include make-default-cta-variation("[inverted].accent", "--accent", lighten($rh-global--color--red, 10%), $rh-global--color--red, $rh-global--color--red, lighten($rh-global--color--red, 10%), "--inverted");




// CTA Solid Default Mixin
@mixin make-solid-cta-default(
    $this-bg-color: var(--rh-cta--default-color--solid),
    $this-text-color: var(--rh-cta--default-text-color--solid),
    $this-flag: ""
  ) {

  background: $this-bg-color#{$this-flag};
  color: $this-text-color#{$this-flag};
}

// CTA Solid
:host([solid]) {

  --rh-cta--solid--padding-y: var(--rh-theme--cta--solid--padding-y, var(--rh-theme--spacing--xs, #{$rh-global--spacer--xs}));
  --rh-cta--solid--padding-x: var(--rh-theme--cta--solid--padding-x, var(--rh-theme--spacing--lg, #{$rh-global--spacer--lg}));
  --rh-cta--solid--BorderRadius: var(--rh-theme--cta--solid--BorderRadius, var(--rh-theme--cta--BorderRadius, #{$rh-global--cta--BorderRadius}));
  --rh-cta--solid--BorderWidth: var(--rh-theme--cta--solid--BorderWidth, var(--rh-theme--cta--BorderWidth, #{$rh-global--border--BorderWidth}));

  --rh-cta--default-color--solid: var(--rh-theme--cta--default-color--solid, var(--rh-theme--default-color, #{$rh-global--color--gray-batman}));
  --rh-cta--default-text-color--solid: var(--rh-theme--cta--default-text-color--solid, var(--rh-theme--default-text-color, #{$rh-global--color--white}));
  --rh-cta--default-color--solid--hover: var(--rh-theme--cta--default-color--solid--hover, var(--rh-theme--default-color--hover, #{darken($rh-global--color--gray-batman, 10%)}));
  --rh-cta--default-text-color--solid--hover: var(--rh-theme--cta--default-text-color--solid--hover, var(--rh-theme--default-text-color--hover, #{$rh-global--color--white}));

  & ::slotted(a) {

    display: inline-block;
    padding: var(--rh-cta--solid--padding-y) var(--rh-cta--solid--padding-x);
    text-decoration: none;
    border: var(--rh-cta--solid--BorderWidth) solid transparent;
    border-radius: var(--rh-cta--solid--BorderRadius);
    transition: all 250ms $rh-global--animation-timing;
    @include make-solid-cta-default();

    &::after {
      display: none;
    }
  }

  & ::slotted(a:hover),
  & ::slotted(a:focus) {
    @include make-solid-cta-default(var(--rh-cta--default-color--solid--hover), var(--rh-cta--default-text-color--solid--hover), " !important");
  }
}

// CTA Solid Color Mixin
@mixin make-solid-cta-variation(
    $this-selector: ".primary",
    $this-name: "--primary",
    $this-bg-color: $rh-global--color--blue-azure,
    $this-text-color: $rh-global--color--white,
    $this-bg-color-hover: darken($rh-global--color--blue-azure, 10%),
    $this-text-color-hover: $rh-global--color--white,
    $this-modifier: ""
  ) {

  :host([solid]#{$this-selector}) {

    @if $this-modifier == '--inverted' {
      --rh-cta#{$this-name}-color#{$this-modifier}--solid: var(--rh-theme--cta#{$this-name}-text-color#{$this-modifier}--solid, var(--rh-theme#{$this-name}-text-color, #{$this-text-color}));
      --rh-cta#{$this-name}-text-color#{$this-modifier}--solid: var(--rh-theme--cta#{$this-name}-color#{$this-modifier}--solid, var(--rh-theme#{$this-name}-color, #{$this-bg-color}));
      --rh-cta#{$this-name}-color#{$this-modifier}--solid--hover: var(--rh-theme--cta#{$this-name}-text-color#{$this-modifier}--solid--hover, var(--rh-theme#{$this-name}-text-color--hover, #{$this-text-color-hover}));
      --rh-cta#{$this-name}-text-color#{$this-modifier}--solid--hover: var(--rh-theme--cta#{$this-name}-color#{$this-modifier}--solid--hover, var(--rh-theme#{$this-name}-color--hover, #{$this-bg-color-hover}));
    } @else {
      --rh-cta#{$this-name}-color#{$this-modifier}--solid: var(--rh-theme--cta#{$this-name}-color#{$this-modifier}--solid, var(--rh-theme#{$this-name}-color, #{$this-bg-color}));
      --rh-cta#{$this-name}-text-color#{$this-modifier}--solid: var(--rh-theme--cta#{$this-name}-text-color#{$this-modifier}--solid, var(--rh-theme#{$this-name}-text-color, #{$this-text-color}));
      --rh-cta#{$this-name}-color#{$this-modifier}--solid--hover: var(--rh-theme--cta#{$this-name}-color#{$this-modifier}--solid--hover, var(--rh-theme#{$this-name}-color--hover, #{$this-bg-color-hover}));
      --rh-cta#{$this-name}-text-color#{$this-modifier}--solid--hover: var(--rh-theme--cta#{$this-name}-text-color#{$this-modifier}--solid--hover, var(--rh-theme#{$this-name}-text-color--hover, #{$this-text-color-hover}));
    }

    & ::slotted(a) {
      @include make-solid-cta-default(var(--rh-cta#{$this-name}-color#{$this-modifier}--solid), var(--rh-cta#{$this-name}-text-color#{$this-modifier}--solid));
    }

    & ::slotted(a:hover),
    & ::slotted(a:focus) {
      @include make-solid-cta-default(var(--rh-cta#{$this-name}-color#{$this-modifier}--solid--hover), var(--rh-cta#{$this-name}-text-color#{$this-modifier}--solid--hover), " !important");
    }
  }
}

// CTA Solid Primary
@include make-solid-cta-variation();
// CTA Solid Secondary
@include make-solid-cta-variation(".secondary", "--secondary", $rh-global--color--gray-iron, $rh-global--color--white, darken($rh-global--color--gray-iron, 10%), $rh-global--color--white);
// CTA Solid Accent
@include make-solid-cta-variation(".accent", "--accent", $rh-global--color--red, $rh-global--color--white, darken($rh-global--color--red, 10%), $rh-global--color--white);

// CTA Solid Default Inverted
@include make-solid-cta-variation("[inverted]", "", $rh-global--color--gray-iron, $rh-global--color--white, darken($rh-global--color--gray-iron, 10%), darken($rh-global--color--white, 5%), "--inverted");
// CTA Solid Primary Inverted
@include make-solid-cta-variation("[inverted].primary", "--primary", $rh-global--color--blue-azure, $rh-global--color--white, darken($rh-global--color--blue-azure, 10%), darken($rh-global--color--white, 5%), "--inverted");
// CTA Solid Secondary Inverted
@include make-solid-cta-variation("[inverted].secondary", "--secondary", $rh-global--color--gray-iron, $rh-global--color--white, darken($rh-global--color--gray-iron, 10%), darken($rh-global--color--white, 5%), "--inverted");
// CTA Solid Accent Inverted
@include make-solid-cta-variation("[inverted].accent", "--accent", $rh-global--color--red, $rh-global--color--white, darken($rh-global--color--red, 10%), darken($rh-global--color--white, 5%), "--inverted");


// CTA Bordered Mixin
@mixin make-bordered-cta-variation(
    $this-selector: "",
    $this-name: "",
    $this-color: $rh-global--color--gray-batman,
    $this-color-hover: darken($rh-global--color--gray-batman, 10%)
  ) {

  :host([bordered][solid]#{$this-selector}) {

    --rh-cta#{$this-name}-border-color: var(--rh-theme--cta#{$this-name}-border-color, var(--rh-theme#{$this-name}-color, #{$this-color}));
    --rh-cta#{$this-name}-border-color--hover: var(--rh-theme--cta#{$this-name}-border-color--hover, var(--rh-theme#{$this-name}-color--hover, #{$this-color-hover}));

    & ::slotted(a) {
      border-color: var(--rh-cta#{$this-name}-border-color);
    }

    & ::slotted(a:hover),
    & ::slotted(a:focus) {
      border-color: var(--rh-cta#{$this-name}-border-color--hover);
    }
  }
}

// CTA Solid Default Bordered
@include make-bordered-cta-variation();
// CTA Solid Primary Bordered
@include make-bordered-cta-variation('.primary', '--primary', $rh-global--color--blue-azure, darken($rh-global--color--blue-azure, 10%));
// CTA Solid Secondary Bordered
@include make-bordered-cta-variation('.secondary', '--secondary', $rh-global--color--gray-iron, darken($rh-global--color--gray-iron, 10%));
// CTA Solid Accent Bordered
@include make-bordered-cta-variation('.accent', '--accent', $rh-global--color--red, darken($rh-global--color--red, 10%));



// CTA Unfilled
:host([unfilled]) {
  & ::slotted(a) {
    background: transparent !important;
  }

  & ::slotted(a:hover),
  & ::slotted(a:focus) {
    // background: transparent !important;
  }
}
