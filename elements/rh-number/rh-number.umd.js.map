{"version":3,"file":"rh-number.umd.js","sources":["rh-number.umd.js"],"sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport RHElement from \"../rhelement/rhelement.umd\";\nimport numeral from \"numeral\";\n\n// easy aliases for common format strings\nconst types = {\n  abbrev: \"0a\", // or 'approx'?\n  ordinal: \"0o\",\n  percent: \"0%\",\n  bytes: \"0[.][00] ib\",\n  e: \"0[.00]e+0\",\n  thousands: \"0,0[.][00]\"\n};\n\n// use thin spaces to separate thousands chunks\n// debugger;\nnumeral.locales.en.delimiters.thousands = \"â€¯\";\n\nclass RhNumber extends RHElement {\n  get html() {\n    return `\n<style>\n:host {\n  display: inline;\n  white-space: nowrap; }\n</style>\n<span></span>`;\n  }\n\n  static get tag() {\n    return \"rh-number\";\n  }\n\n  get styleUrl() {\n    return \"rh-number.scss\";\n  }\n\n  get templateUrl() {\n    return \"rh-number.html\";\n  }\n\n  static get observedAttributes() {\n    return [\"number\", \"format\", \"type\"];\n  }\n\n  constructor() {\n    super(RhNumber);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.connected = true;\n\n    this._determineFormat();\n    this._setInitialNumber();\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback(...arguments);\n    switch (attr) {\n      case \"type\":\n        this._determineFormat();\n        break;\n      case \"format\":\n        this._updateNumber(this.getAttribute(\"number\"), newVal);\n        break;\n      case \"number\":\n        this._updateNumber(newVal, this.getAttribute(\"format\"));\n    }\n  }\n\n  _setInitialNumber() {\n    const numberAttrDefined = !Number.isNaN(\n      parseFloat(this.getAttribute(\"number\"))\n    );\n    const numberContentDefined = !Number.isNaN(parseFloat(this.textContent));\n\n    if (numberAttrDefined) {\n      this.setAttribute(\"number\", this.getAttribute(\"number\"));\n    } else if (numberContentDefined) {\n      this.setAttribute(\"number\", this.textContent);\n    }\n  }\n\n  _determineFormat() {\n    let type = this.getAttribute(\"type\");\n\n    if (type && types[type]) {\n      this.setAttribute(\"format\", types[type]);\n    } else {\n      this.setAttribute(\"format\", this.getAttribute(\"format\") || \"0\");\n    }\n  }\n\n  _updateNumber(num, type) {\n    this.shadowRoot.querySelector(\"span\").textContent = this._format(num, type);\n  }\n\n  _format(num, type) {\n    return numeral(num).format(type);\n  }\n}\n\nRHElement.create(RhNumber);\n"],"names":["types","abbrev","ordinal","percent","bytes","e","thousands","numeral","locales","en","delimiters","RhNumber","connected","_determineFormat","_setInitialNumber","attr","oldVal","newVal","arguments","_updateNumber","getAttribute","numberAttrDefined","Number","isNaN","parseFloat","numberContentDefined","textContent","setAttribute","type","num","shadowRoot","querySelector","_format","format","RHElement","create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;;;;;;;;;;;;;;;;;;;;EAyBA;EACA,IAAMA,QAAQ;EACZC,UAAQ,IADI;EAEZC,WAAS,IAFG;EAGZC,WAAS,IAHG;EAIZC,SAAO,aAJK;EAKZC,KAAG,WALS;EAMZC,aAAW;EANC,CAAd;;EASA;EACA;EACAC,QAAQC,OAAR,CAAgBC,EAAhB,CAAmBC,UAAnB,CAA8BJ,SAA9B,GAA0C,GAA1C;;MAEMK;;;;6BACO;EACT;EAOD;;;6BAMc;EACb,aAAO,gBAAP;EACD;;;6BAEiB;EAChB,aAAO,gBAAP;EACD;;;6BAVgB;EACf,aAAO,WAAP;EACD;;;6BAU+B;EAC9B,aAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,CAAP;EACD;;;EAED,sBAAc;EAAA;EAAA,8GACNA,QADM;EAEb;;;;0CAEmB;EAClB;EACA,WAAKC,SAAL,GAAiB,IAAjB;;EAEA,WAAKC,gBAAL;EACA,WAAKC,iBAAL;EACD;;;+CAEwBC,MAAMC,QAAQC,QAAQ;EAC7C,mIAAkCC,SAAlC;EACA,cAAQH,IAAR;EACE,aAAK,MAAL;EACE,eAAKF,gBAAL;EACA;EACF,aAAK,QAAL;EACE,eAAKM,aAAL,CAAmB,KAAKC,YAAL,CAAkB,QAAlB,CAAnB,EAAgDH,MAAhD;EACA;EACF,aAAK,QAAL;EACE,eAAKE,aAAL,CAAmBF,MAAnB,EAA2B,KAAKG,YAAL,CAAkB,QAAlB,CAA3B;EARJ;EAUD;;;0CAEmB;EAClB,UAAMC,oBAAoB,CAACC,OAAOC,KAAP,CACzBC,WAAW,KAAKJ,YAAL,CAAkB,QAAlB,CAAX,CADyB,CAA3B;EAGA,UAAMK,uBAAuB,CAACH,OAAOC,KAAP,CAAaC,WAAW,KAAKE,WAAhB,CAAb,CAA9B;;EAEA,UAAIL,iBAAJ,EAAuB;EACrB,aAAKM,YAAL,CAAkB,QAAlB,EAA4B,KAAKP,YAAL,CAAkB,QAAlB,CAA5B;EACD,OAFD,MAEO,IAAIK,oBAAJ,EAA0B;EAC/B,aAAKE,YAAL,CAAkB,QAAlB,EAA4B,KAAKD,WAAjC;EACD;EACF;;;yCAEkB;EACjB,UAAIE,OAAO,KAAKR,YAAL,CAAkB,MAAlB,CAAX;;EAEA,UAAIQ,QAAQ5B,MAAM4B,IAAN,CAAZ,EAAyB;EACvB,aAAKD,YAAL,CAAkB,QAAlB,EAA4B3B,MAAM4B,IAAN,CAA5B;EACD,OAFD,MAEO;EACL,aAAKD,YAAL,CAAkB,QAAlB,EAA4B,KAAKP,YAAL,CAAkB,QAAlB,KAA+B,GAA3D;EACD;EACF;;;oCAEaS,KAAKD,MAAM;EACvB,WAAKE,UAAL,CAAgBC,aAAhB,CAA8B,MAA9B,EAAsCL,WAAtC,GAAoD,KAAKM,OAAL,CAAaH,GAAb,EAAkBD,IAAlB,CAApD;EACD;;;8BAEOC,KAAKD,MAAM;EACjB,aAAOrB,QAAQsB,GAAR,EAAaI,MAAb,CAAoBL,IAApB,CAAP;EACD;;;IAlFoBM;;EAqFvBA,UAAUC,MAAV,CAAiBxB,QAAjB;;;;"}